[{"title":"general","properties":{"rust-analyzer.discoverProjectRunner":{"type":["null","string"],"markdownDescription":"Sets the extension responsible for determining which extension the rust-analyzer extension uses to generate `rust-project.json` files. This should should only be used\n if a build system like Buck or Bazel is also in use.","default":null},"rust-analyzer.showUnlinkedFileNotification":{"type":"boolean","markdownDescription":"Whether to show a notification for unlinked files asking the user to add the corresponding Cargo.toml to the linked projects setting.","default":true},"rust-analyzer.testExplorer":{"type":"boolean","markdownDescription":"Whether to show the test explorer.","default":false},"rust-analyzer.showRequestFailedErrorNotification":{"type":"boolean","markdownDescription":"Whether to show error notifications for failing requests.","default":true},"rust-analyzer.restartServerOnConfigChange":{"type":"boolean","markdownDescription":"Whether to restart the server automatically when certain settings that require a restart are changed.","default":false},"rust-analyzer.showDependenciesExplorer":{"type":"boolean","markdownDescription":"Whether to show the dependencies view.","default":true}}},{"title":"runnables","properties":{"rust-analyzer.runnables.extraEnv":{"anyOf":[{"type":"null"},{"type":"array","items":{"type":"object","properties":{"platform":{"type":["null","string","array"],"markdownDescription":"Platform(s) filter like \"win32\" or [\"linux\", \"win32\"]. See [process.platform](https:\/\/nodejs.org\/api\/process.html#processplatform) values.","default":null},"env":{"type":"object","description":"Variables in form of { \"key\": \"value\"}"},"mask":{"type":"string","description":"Runnable name mask"}}}},{"type":"object","description":"Variables in form of { \"key\": \"value\"}"}],"markdownDescription":"Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command.","default":null},"rust-analyzer.runnables.problemMatcher":{"type":"array","items":{"type":"string"},"markdownDescription":"Problem matchers to use for `rust-analyzer.run` command, eg `[\"$rustc\", \"$rust-panic\"]`.","default":["$rustc"]}}},{"title":"statusBar","properties":{"rust-analyzer.statusBar.clickAction":{"type":"string","enumDescriptions":["Stop Server","Open Logs"],"default":"openLogs","enum":["stopServer","openLogs"],"markdownDescription":"Action to run when clicking the extension status bar item."}}},{"title":"server","properties":{"rust-analyzer.server.path":{"type":["null","string"],"scope":"machine-overridable","markdownDescription":"Path to rust-analyzer executable (points to bundled binary by default).","default":null},"rust-analyzer.server.extraEnv":{"type":["null","object"],"markdownDescription":"Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging.","additionalProperties":{"type":["string","number"]},"default":null}}},{"title":"trace","properties":{"rust-analyzer.trace.server":{"type":"string","scope":"window","enumDescriptions":["No traces","Error only","Full log"],"default":"off","enum":["off","messages","verbose"],"description":"Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users)."},"rust-analyzer.trace.extension":{"type":"boolean","description":"Enable logging of VS Code extensions itself.","default":false}}},{"title":"debug","properties":{"rust-analyzer.debug.engine":{"type":"string","description":"Preferred debug engine.","default":"auto","enum":["auto","vadimcn.vscode-lldb","ms-vscode.cpptools"],"markdownEnumDescriptions":["First try to use [CodeLLDB](https:\/\/marketplace.visualstudio.com\/items?itemName=vadimcn.vscode-lldb), if it's not installed try to use [MS C++ tools](https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools).","Use [CodeLLDB](https:\/\/marketplace.visualstudio.com\/items?itemName=vadimcn.vscode-lldb)","Use [MS C++ tools](https:\/\/marketplace.visualstudio.com\/items?itemName=ms-vscode.cpptools)"]},"rust-analyzer.debug.openDebugPane":{"type":"boolean","default":false,"markdownDescription":"Whether to open up the `Debug Panel` on debugging start."},"rust-analyzer.debug.engineSettings":{"type":"object","markdownDescription":"Optional settings passed to the debug engine. Example: `{ \"lldb\": { \"terminal\":\"external\"} }`","default":{}},"rust-analyzer.debug.sourceFileMap":{"type":["object","string"],"description":"Optional source file mappings passed to the debug engine.","default":{"\/rustc\/<id>":"${env:USERPROFILE}\/.rustup\/toolchains\/<toolchain-id>\/lib\/rustlib\/src\/rust"},"const":"auto"}}},{"title":"typing","properties":{"rust-analyzer.typing.continueCommentsOnNewline":{"type":"boolean","markdownDescription":"Whether to prefix newlines after comments with the corresponding comment prefix.","default":true}}},{"title":"diagnostics","properties":{"rust-analyzer.diagnostics.useRustcErrorCode":{"type":"boolean","markdownDescription":"Whether to show diagnostics using the original rustc error code. If this is false, all rustc diagnostics will have the code 'rustc(Click for full compiler diagnostics)'","default":false},"rust-analyzer.diagnostics.previewRustcOutput":{"type":"boolean","markdownDescription":"Whether to show the main part of the rendered rustc output of a diagnostic message.","default":false}}},{"title":"$generated-start"},{"title":"assist","properties":{"rust-analyzer.assist.emitMustUse":{"type":"boolean","markdownDescription":"Whether to insert #[must_use] when generating `as_` methods\nfor enum variants.","default":false}}},{"title":"assist","properties":{"rust-analyzer.assist.expressionFillDefault":{"type":"string","enumDescriptions":["Fill missing expressions with the `todo` macro","Fill missing expressions with reasonable defaults, `new` or `default` constructors."],"default":"todo","enum":["todo","default"],"markdownDescription":"Placeholder expression to use for missing expressions in assists."}}},{"title":"assist","properties":{"rust-analyzer.assist.termSearch.borrowcheck":{"type":"boolean","markdownDescription":"Enable borrow checking for term search code assists. If set to false, also there will be more suggestions, but some of them may not borrow-check.","default":true}}},{"title":"assist","properties":{"rust-analyzer.assist.termSearch.fuel":{"type":"integer","minimum":0,"markdownDescription":"Term search fuel in \"units of work\" for assists (Defaults to 1800).","default":1800}}},{"title":"cachePriming","properties":{"rust-analyzer.cachePriming.enable":{"type":"boolean","markdownDescription":"Warm up caches on project load.","default":true}}},{"title":"cachePriming","properties":{"rust-analyzer.cachePriming.numThreads":{"anyOf":[{"type":"number","minimum":0,"maximum":255},{"type":"string","enum":["physical","logical"],"enumDescriptions":["Use the number of physical cores","Use the number of logical cores"]}],"markdownDescription":"How many worker threads to handle priming caches. The default `0` means to pick automatically.","default":"physical"}}},{"title":"cargo","properties":{"rust-analyzer.cargo.allTargets":{"type":"boolean","markdownDescription":"Pass `--all-targets` to cargo invocation.","default":true}}},{"title":"cargo","properties":{"rust-analyzer.cargo.autoreload":{"type":"boolean","markdownDescription":"Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` or `.cargo\/config.toml` changes.","default":true}}},{"title":"cargo","properties":{"rust-analyzer.cargo.buildScripts.enable":{"type":"boolean","markdownDescription":"Run build scripts (`build.rs`) for more precise code analysis.","default":true}}},{"title":"cargo","properties":{"rust-analyzer.cargo.buildScripts.invocationLocation":{"type":"string","enumDescriptions":["The command will be executed in the corresponding workspace root.","The command will be executed in the project root."],"default":"workspace","enum":["workspace","root"],"markdownDescription":"Specifies the working directory for running build scripts.\n- \"workspace\": run build scripts for a workspace in the workspace's root directory.\n    This is incompatible with `#rust-analyzer.cargo.buildScripts.invocationStrategy#` set to `once`.\n- \"root\": run build scripts in the project's root directory.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set."}}},{"title":"cargo","properties":{"rust-analyzer.cargo.buildScripts.invocationStrategy":{"type":"string","enumDescriptions":["The command will be executed for each workspace.","The command will be executed once."],"default":"per_workspace","enum":["per_workspace","once"],"markdownDescription":"Specifies the invocation strategy to use when running the build scripts command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set."}}},{"title":"cargo","properties":{"rust-analyzer.cargo.buildScripts.overrideCommand":{"type":["null","array"],"items":{"type":"string"},"markdownDescription":"Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nIf there are multiple linked projects\/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.cargo.buildScripts.invocationStrategy#` and\n`#rust-analyzer.cargo.buildScripts.invocationLocation#`.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets --keep-going\n```\n.","default":null}}},{"title":"cargo","properties":{"rust-analyzer.cargo.buildScripts.rebuildOnSave":{"type":"boolean","markdownDescription":"Rerun proc-macros building\/build-scripts running when proc-macro\nor build-script sources change and are saved.","default":true}}},{"title":"cargo","properties":{"rust-analyzer.cargo.buildScripts.useRustcWrapper":{"type":"boolean","markdownDescription":"Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid checking unnecessary things.","default":true}}},{"title":"cargo","properties":{"rust-analyzer.cargo.cfgs":{"type":"object","markdownDescription":"List of cfg options to enable with the given values.","default":{"miri":null,"debug_assertions":null}}}},{"title":"cargo","properties":{"rust-analyzer.cargo.extraArgs":{"type":"array","items":{"type":"string"},"markdownDescription":"Extra arguments that are passed to every cargo invocation.","default":[]}}},{"title":"cargo","properties":{"rust-analyzer.cargo.extraEnv":{"type":"object","markdownDescription":"Extra environment variables that will be set when running cargo, rustc\nor other commands within the workspace. Useful for setting RUSTFLAGS.","default":{}}}},{"title":"cargo","properties":{"rust-analyzer.cargo.features":{"anyOf":[{"type":"string","enum":["all"],"enumDescriptions":["Pass `--all-features` to cargo"]},{"type":"array","items":{"type":"string"}}],"markdownDescription":"List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo.","default":[]}}},{"title":"cargo","properties":{"rust-analyzer.cargo.noDefaultFeatures":{"type":"boolean","markdownDescription":"Whether to pass `--no-default-features` to cargo.","default":false}}},{"title":"cargo","properties":{"rust-analyzer.cargo.sysroot":{"type":["null","string"],"markdownDescription":"Relative path to the sysroot, or \"discover\" to try to automatically find it via\n\"rustc --print sysroot\".\n\nUnsetting this disables sysroot loading.\n\nThis option does not take effect until rust-analyzer is restarted.","default":"discover"}}},{"title":"cargo","properties":{"rust-analyzer.cargo.sysrootQueryMetadata":{"type":"boolean","markdownDescription":"Whether to run cargo metadata on the sysroot library allowing rust-analyzer to analyze\nthird-party dependencies of the standard libraries.\n\nThis will cause `cargo` to create a lockfile in your sysroot directory. rust-analyzer\nwill attempt to clean up afterwards, but nevertheless requires the location to be\nwritable to.","default":false}}},{"title":"cargo","properties":{"rust-analyzer.cargo.sysrootSrc":{"type":["null","string"],"markdownDescription":"Relative path to the sysroot library sources. If left unset, this will default to\n`{cargo.sysroot}\/lib\/rustlib\/src\/rust\/library`.\n\nThis option does not take effect until rust-analyzer is restarted.","default":null}}},{"title":"cargo","properties":{"rust-analyzer.cargo.target":{"type":["null","string"],"markdownDescription":"Compilation target override (target triple).","default":null}}},{"title":"cargo","properties":{"rust-analyzer.cargo.targetDir":{"anyOf":[{"type":"null"},{"type":"boolean"},{"type":"string"}],"markdownDescription":"Optional path to a rust-analyzer specific target directory.\nThis prevents rust-analyzer's `cargo check` and initial build-script and proc-macro\nbuilding from locking the `Cargo.lock` at the expense of duplicating build artifacts.\n\nSet to `true` to use a subdirectory of the existing target directory or\nset to a path relative to the workspace to use that path.","default":null}}},{"title":"general","properties":{"rust-analyzer.checkOnSave":{"type":"boolean","markdownDescription":"Run the check command for diagnostics on save.","default":true}}},{"title":"check","properties":{"rust-analyzer.check.allTargets":{"type":["null","boolean"],"markdownDescription":"Check all targets and tests (`--all-targets`). Defaults to\n`#rust-analyzer.cargo.allTargets#`.","default":null}}},{"title":"check","properties":{"rust-analyzer.check.command":{"type":"string","markdownDescription":"Cargo command to use for `cargo check`.","default":"check"}}},{"title":"check","properties":{"rust-analyzer.check.extraArgs":{"type":"array","items":{"type":"string"},"markdownDescription":"Extra arguments for `cargo check`.","default":[]}}},{"title":"check","properties":{"rust-analyzer.check.extraEnv":{"type":"object","markdownDescription":"Extra environment variables that will be set when running `cargo check`.\nExtends `#rust-analyzer.cargo.extraEnv#`.","default":{}}}},{"title":"check","properties":{"rust-analyzer.check.features":{"anyOf":[{"type":"string","enum":["all"],"enumDescriptions":["Pass `--all-features` to cargo"]},{"type":"array","items":{"type":"string"}},{"type":"null"}],"markdownDescription":"List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo.","default":null}}},{"title":"check","properties":{"rust-analyzer.check.ignore":{"type":"array","default":[],"items":{"type":"string"},"uniqueItems":true,"markdownDescription":"List of `cargo check` (or other command specified in `check.command`) diagnostics to ignore.\n\nFor example for `cargo check`: `dead_code`, `unused_imports`, `unused_variables`,..."}}},{"title":"check","properties":{"rust-analyzer.check.invocationLocation":{"type":"string","enumDescriptions":["The command will be executed in the corresponding workspace root.","The command will be executed in the project root."],"default":"workspace","enum":["workspace","root"],"markdownDescription":"Specifies the working directory for running checks.\n- \"workspace\": run checks for workspaces in the corresponding workspaces' root directories.\n    This falls back to \"root\" if `#rust-analyzer.check.invocationStrategy#` is set to `once`.\n- \"root\": run checks in the project's root directory.\nThis config only has an effect when `#rust-analyzer.check.overrideCommand#`\nis set."}}},{"title":"check","properties":{"rust-analyzer.check.invocationStrategy":{"type":"string","enumDescriptions":["The command will be executed for each workspace.","The command will be executed once."],"default":"per_workspace","enum":["per_workspace","once"],"markdownDescription":"Specifies the invocation strategy to use when running the check command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.check.overrideCommand#`\nis set."}}},{"title":"check","properties":{"rust-analyzer.check.noDefaultFeatures":{"type":["null","boolean"],"markdownDescription":"Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`.","default":null}}},{"title":"check","properties":{"rust-analyzer.check.overrideCommand":{"type":["null","array"],"items":{"type":"string"},"markdownDescription":"Override the command rust-analyzer uses instead of `cargo check` for\ndiagnostics on save. The command is required to output json and\nshould therefore include `--message-format=json` or a similar option\n(if your client supports the `colorDiagnosticOutput` experimental\ncapability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n\nIf you're changing this because you're using some tool wrapping\nCargo, you might also want to change\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n\nIf there are multiple linked projects\/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.check.invocationStrategy#` and\n`#rust-analyzer.check.invocationLocation#`.\n\nIf `$saved_file` is part of the command, rust-analyzer will pass\nthe absolute path of the saved file to the provided command. This is\nintended to be used with non-Cargo build systems.\nNote that `$saved_file` is experimental and may be removed in the future.\n\nAn example command would be:\n\n```bash\ncargo check --workspace --message-format=json --all-targets\n```\n.","default":null}}},{"title":"check","properties":{"rust-analyzer.check.targets":{"anyOf":[{"type":"null"},{"type":"string"},{"type":"array","items":{"type":"string"}}],"markdownDescription":"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n\nCan be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n\nAliased as `\"checkOnSave.targets\"`.","default":null}}},{"title":"check","properties":{"rust-analyzer.check.workspace":{"type":"boolean","markdownDescription":"Whether `--workspace` should be passed to `cargo check`.\nIf false, `-p <package>` will be passed instead.","default":true}}},{"title":"completion","properties":{"rust-analyzer.completion.autoimport.enable":{"type":"boolean","markdownDescription":"Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.","default":true}}},{"title":"completion","properties":{"rust-analyzer.completion.autoself.enable":{"type":"boolean","markdownDescription":"Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method.","default":true}}},{"title":"completion","properties":{"rust-analyzer.completion.callable.snippets":{"type":"string","enumDescriptions":["Add call parentheses and pre-fill arguments.","Add call parentheses.","Do no snippet completions for callables."],"default":"fill_arguments","enum":["fill_arguments","add_parentheses","none"],"markdownDescription":"Whether to add parenthesis and argument snippets when completing function."}}},{"title":"completion","properties":{"rust-analyzer.completion.fullFunctionSignatures.enable":{"type":"boolean","markdownDescription":"Whether to show full function\/method signatures in completion docs.","default":false}}},{"title":"completion","properties":{"rust-analyzer.completion.limit":{"type":["null","integer"],"minimum":0,"markdownDescription":"Maximum number of completions to return. If `None`, the limit is infinite.","default":null}}},{"title":"completion","properties":{"rust-analyzer.completion.postfix.enable":{"type":"boolean","markdownDescription":"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.","default":true}}},{"title":"completion","properties":{"rust-analyzer.completion.privateEditable.enable":{"type":"boolean","markdownDescription":"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.","default":false}}},{"title":"completion","properties":{"rust-analyzer.completion.snippets.custom":{"type":"object","markdownDescription":"Custom completion snippets.","default":{"Arc::new":{"postfix":"arc","description":"Put the expression into an `Arc`","requires":"std::sync::Arc","scope":"expr","body":"Arc::new(${receiver})"},"Box::pin":{"postfix":"pinbox","description":"Put the expression into a pinned `Box`","requires":"std::boxed::Box","scope":"expr","body":"Box::pin(${receiver})"},"Ok":{"postfix":"ok","description":"Wrap the expression in a `Result::Ok`","scope":"expr","body":"Ok(${receiver})"},"Some":{"postfix":"some","description":"Wrap the expression in an `Option::Some`","scope":"expr","body":"Some(${receiver})"},"Rc::new":{"postfix":"rc","description":"Put the expression into an `Rc`","requires":"std::rc::Rc","scope":"expr","body":"Rc::new(${receiver})"},"Err":{"postfix":"err","description":"Wrap the expression in a `Result::Err`","scope":"expr","body":"Err(${receiver})"}}}}},{"title":"completion","properties":{"rust-analyzer.completion.termSearch.enable":{"type":"boolean","markdownDescription":"Whether to enable term search based snippets like `Some(foo.bar().baz())`.","default":false}}},{"title":"completion","properties":{"rust-analyzer.completion.termSearch.fuel":{"type":"integer","minimum":0,"markdownDescription":"Term search fuel in \"units of work\" for autocompletion (Defaults to 1000).","default":1000}}},{"title":"diagnostics","properties":{"rust-analyzer.diagnostics.disabled":{"type":"array","default":[],"items":{"type":"string"},"uniqueItems":true,"markdownDescription":"List of rust-analyzer diagnostics to disable."}}},{"title":"diagnostics","properties":{"rust-analyzer.diagnostics.enable":{"type":"boolean","markdownDescription":"Whether to show native rust-analyzer diagnostics.","default":true}}},{"title":"diagnostics","properties":{"rust-analyzer.diagnostics.experimental.enable":{"type":"boolean","markdownDescription":"Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual.","default":false}}},{"title":"diagnostics","properties":{"rust-analyzer.diagnostics.remapPrefix":{"type":"object","markdownDescription":"Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.","default":{}}}},{"title":"diagnostics","properties":{"rust-analyzer.diagnostics.styleLints.enable":{"type":"boolean","markdownDescription":"Whether to run additional style lints.","default":false}}},{"title":"diagnostics","properties":{"rust-analyzer.diagnostics.warningsAsHint":{"type":"array","items":{"type":"string"},"markdownDescription":"List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.","default":[]}}},{"title":"diagnostics","properties":{"rust-analyzer.diagnostics.warningsAsInfo":{"type":"array","items":{"type":"string"},"markdownDescription":"List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.","default":[]}}},{"title":"files","properties":{"rust-analyzer.files.excludeDirs":{"type":"array","items":{"type":"string"},"markdownDescription":"These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.","default":[]}}},{"title":"files","properties":{"rust-analyzer.files.watcher":{"type":"string","enumDescriptions":["Use the client (editor) to watch files for changes","Use server-side file watching"],"default":"client","enum":["client","server"],"markdownDescription":"Controls file watching implementation."}}},{"title":"highlightRelated","properties":{"rust-analyzer.highlightRelated.breakPoints.enable":{"type":"boolean","markdownDescription":"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.","default":true}}},{"title":"highlightRelated","properties":{"rust-analyzer.highlightRelated.closureCaptures.enable":{"type":"boolean","markdownDescription":"Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.","default":true}}},{"title":"highlightRelated","properties":{"rust-analyzer.highlightRelated.exitPoints.enable":{"type":"boolean","markdownDescription":"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).","default":true}}},{"title":"highlightRelated","properties":{"rust-analyzer.highlightRelated.references.enable":{"type":"boolean","markdownDescription":"Enables highlighting of related references while the cursor is on any identifier.","default":true}}},{"title":"highlightRelated","properties":{"rust-analyzer.highlightRelated.yieldPoints.enable":{"type":"boolean","markdownDescription":"Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.actions.debug.enable":{"type":"boolean","markdownDescription":"Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.actions.enable":{"type":"boolean","markdownDescription":"Whether to show HoverActions in Rust files.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.actions.gotoTypeDef.enable":{"type":"boolean","markdownDescription":"Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.actions.implementations.enable":{"type":"boolean","markdownDescription":"Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.actions.references.enable":{"type":"boolean","markdownDescription":"Whether to show `References` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":false}}},{"title":"hover","properties":{"rust-analyzer.hover.actions.run.enable":{"type":"boolean","markdownDescription":"Whether to show `Run` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.documentation.enable":{"type":"boolean","markdownDescription":"Whether to show documentation on hover.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.documentation.keywords.enable":{"type":"boolean","markdownDescription":"Whether to show keyword hover popups. Only applies when\n`#rust-analyzer.hover.documentation.enable#` is set.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.links.enable":{"type":"boolean","markdownDescription":"Use markdown syntax for links on hover.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.memoryLayout.alignment":{"anyOf":[{"type":"null"},{"type":"string","enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}],"markdownDescription":"How to render the align information in a memory layout hover.","default":"hexadecimal"}}},{"title":"hover","properties":{"rust-analyzer.hover.memoryLayout.enable":{"type":"boolean","markdownDescription":"Whether to show memory layout data on hover.","default":true}}},{"title":"hover","properties":{"rust-analyzer.hover.memoryLayout.niches":{"type":["null","boolean"],"markdownDescription":"How to render the niche information in a memory layout hover.","default":false}}},{"title":"hover","properties":{"rust-analyzer.hover.memoryLayout.offset":{"anyOf":[{"type":"null"},{"type":"string","enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}],"markdownDescription":"How to render the offset information in a memory layout hover.","default":"hexadecimal"}}},{"title":"hover","properties":{"rust-analyzer.hover.memoryLayout.size":{"anyOf":[{"type":"null"},{"type":"string","enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"]}],"markdownDescription":"How to render the size information in a memory layout hover.","default":"both"}}},{"title":"hover","properties":{"rust-analyzer.hover.show.enumVariants":{"type":["null","integer"],"minimum":0,"markdownDescription":"How many variants of an enum to display when hovering on. Show none if empty.","default":5}}},{"title":"hover","properties":{"rust-analyzer.hover.show.fields":{"type":["null","integer"],"minimum":0,"markdownDescription":"How many fields of a struct, variant or union to display when hovering on. Show none if empty.","default":5}}},{"title":"hover","properties":{"rust-analyzer.hover.show.traitAssocItems":{"type":["null","integer"],"minimum":0,"markdownDescription":"How many associated items of a trait to display when hovering a trait.","default":null}}},{"title":"imports","properties":{"rust-analyzer.imports.granularity.enforce":{"type":"boolean","markdownDescription":"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.","default":false}}},{"title":"imports","properties":{"rust-analyzer.imports.granularity.group":{"type":"string","enumDescriptions":["Do not change the granularity of any imports and preserve the original structure written by the developer.","Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.","Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.","Flatten imports so that each has its own use statement.","Merge all imports into a single use statement as long as they have the same visibility and attributes."],"default":"crate","enum":["preserve","crate","module","item","one"],"markdownDescription":"How imports should be grouped into use statements."}}},{"title":"imports","properties":{"rust-analyzer.imports.group.enable":{"type":"boolean","markdownDescription":"Group inserted imports by the [following order](https:\/\/rust-analyzer.github.io\/manual.html#auto-import). Groups are separated by newlines.","default":true}}},{"title":"imports","properties":{"rust-analyzer.imports.merge.glob":{"type":"boolean","markdownDescription":"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.","default":true}}},{"title":"imports","properties":{"rust-analyzer.imports.preferNoStd":{"type":"boolean","markdownDescription":"Prefer to unconditionally use imports of the core and alloc crate, over the std crate.","default":false}}},{"title":"imports","properties":{"rust-analyzer.imports.preferPrelude":{"type":"boolean","markdownDescription":"Whether to prefer import paths containing a `prelude` module.","default":false}}},{"title":"imports","properties":{"rust-analyzer.imports.prefix":{"type":"string","enumDescriptions":["Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.","Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.","Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."],"default":"plain","enum":["plain","self","crate"],"markdownDescription":"The path structure for newly inserted paths to use."}}},{"title":"imports","properties":{"rust-analyzer.imports.prefixExternPrelude":{"type":"boolean","markdownDescription":"Whether to prefix external (including std, core) crate imports with `::`. e.g. \"use ::std::io::Read;\".","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.bindingModeHints.enable":{"type":"boolean","markdownDescription":"Whether to show inlay type hints for binding modes.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.chainingHints.enable":{"type":"boolean","markdownDescription":"Whether to show inlay type hints for method chains.","default":true}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.closingBraceHints.enable":{"type":"boolean","markdownDescription":"Whether to show inlay hints after a closing `}` to indicate what item it belongs to.","default":true}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.closingBraceHints.minLines":{"type":"integer","minimum":0,"markdownDescription":"Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\nto always show them).","default":25}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.closureCaptureHints.enable":{"type":"boolean","markdownDescription":"Whether to show inlay hints for closure captures.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.closureReturnTypeHints.enable":{"type":"string","enumDescriptions":["Always show type hints for return types of closures.","Never show type hints for return types of closures.","Only show type hints for return types of closures with blocks."],"default":"never","enum":["always","never","with_block"],"markdownDescription":"Whether to show inlay type hints for return types of closures."}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.closureStyle":{"type":"string","enumDescriptions":["`impl_fn`: `impl FnMut(i32, u64) -> i8`","`rust_analyzer`: `|i32, u64| -> i8`","`with_id`: `{closure#14352}`, where that id is the unique number of the closure in r-a internals","`hide`: Shows `...` for every closure type"],"default":"impl_fn","enum":["impl_fn","rust_analyzer","with_id","hide"],"markdownDescription":"Closure notation in type and chaining inlay hints."}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.discriminantHints.enable":{"type":"string","enumDescriptions":["Always show all discriminant hints.","Never show discriminant hints.","Only show discriminant hints on fieldless enum variants."],"default":"never","enum":["always","never","fieldless"],"markdownDescription":"Whether to show enum variant discriminant hints."}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.expressionAdjustmentHints.enable":{"type":"string","enumDescriptions":["Always show all adjustment hints.","Never show adjustment hints.","Only show auto borrow and dereference adjustment hints."],"default":"never","enum":["always","never","reborrow"],"markdownDescription":"Whether to show inlay hints for type adjustments."}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe":{"type":"boolean","markdownDescription":"Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.expressionAdjustmentHints.mode":{"type":"string","enumDescriptions":["Always show adjustment hints as prefix (`*expr`).","Always show adjustment hints as postfix (`expr.*`).","Show prefix or postfix depending on which uses less parenthesis, preferring prefix.","Show prefix or postfix depending on which uses less parenthesis, preferring postfix."],"default":"prefix","enum":["prefix","postfix","prefer_prefix","prefer_postfix"],"markdownDescription":"Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc)."}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.genericParameterHints.const.enable":{"type":"boolean","markdownDescription":"Whether to show const generic parameter name inlay hints.","default":true}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.genericParameterHints.lifetime.enable":{"type":"boolean","markdownDescription":"Whether to show generic lifetime parameter name inlay hints.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.genericParameterHints.type.enable":{"type":"boolean","markdownDescription":"Whether to show generic type parameter name inlay hints.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.implicitDrops.enable":{"type":"boolean","markdownDescription":"Whether to show implicit drop hints.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.lifetimeElisionHints.enable":{"type":"string","enumDescriptions":["Always show lifetime elision hints.","Never show lifetime elision hints.","Only show lifetime elision hints if a return type is involved."],"default":"never","enum":["always","never","skip_trivial"],"markdownDescription":"Whether to show inlay type hints for elided lifetimes in function signatures."}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames":{"type":"boolean","markdownDescription":"Whether to prefer using parameter names as the name for elided lifetime hints if possible.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.maxLength":{"type":["null","integer"],"minimum":0,"markdownDescription":"Maximum length for inlay hints. Set to null to have an unlimited length.","default":25}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.parameterHints.enable":{"type":"boolean","markdownDescription":"Whether to show function parameter name inlay hints at the call\nsite.","default":true}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.rangeExclusiveHints.enable":{"type":"boolean","markdownDescription":"Whether to show exclusive range inlay hints.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.reborrowHints.enable":{"type":"string","enumDescriptions":["Always show reborrow hints.","Never show reborrow hints.","Only show mutable reborrow hints."],"default":"never","enum":["always","never","mutable"],"markdownDescription":"Whether to show inlay hints for compiler inserted reborrows.\nThis setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#."}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.renderColons":{"type":"boolean","markdownDescription":"Whether to render leading colons for type hints, and trailing colons for parameter hints.","default":true}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.typeHints.enable":{"type":"boolean","markdownDescription":"Whether to show inlay type hints for variables.","default":true}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.typeHints.hideClosureInitialization":{"type":"boolean","markdownDescription":"Whether to hide inlay type hints for `let` statements that initialize to a closure.\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.","default":false}}},{"title":"inlayHints","properties":{"rust-analyzer.inlayHints.typeHints.hideNamedConstructor":{"type":"boolean","markdownDescription":"Whether to hide inlay type hints for constructors.","default":false}}},{"title":"interpret","properties":{"rust-analyzer.interpret.tests":{"type":"boolean","markdownDescription":"Enables the experimental support for interpreting tests.","default":false}}},{"title":"joinLines","properties":{"rust-analyzer.joinLines.joinAssignments":{"type":"boolean","markdownDescription":"Join lines merges consecutive declaration and initialization of an assignment.","default":true}}},{"title":"joinLines","properties":{"rust-analyzer.joinLines.joinElseIf":{"type":"boolean","markdownDescription":"Join lines inserts else between consecutive ifs.","default":true}}},{"title":"joinLines","properties":{"rust-analyzer.joinLines.removeTrailingComma":{"type":"boolean","markdownDescription":"Join lines removes trailing commas.","default":true}}},{"title":"joinLines","properties":{"rust-analyzer.joinLines.unwrapTrivialBlock":{"type":"boolean","markdownDescription":"Join lines unwraps trivial blocks.","default":true}}},{"title":"lens","properties":{"rust-analyzer.lens.debug.enable":{"type":"boolean","markdownDescription":"Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","default":true}}},{"title":"lens","properties":{"rust-analyzer.lens.enable":{"type":"boolean","markdownDescription":"Whether to show CodeLens in Rust files.","default":true}}},{"title":"lens","properties":{"rust-analyzer.lens.implementations.enable":{"type":"boolean","markdownDescription":"Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","default":true}}},{"title":"lens","properties":{"rust-analyzer.lens.location":{"type":"string","enumDescriptions":["Render annotations above the name of the item.","Render annotations above the whole item, including documentation comments and attributes."],"default":"above_name","enum":["above_name","above_whole_item"],"markdownDescription":"Where to render annotations."}}},{"title":"lens","properties":{"rust-analyzer.lens.references.adt.enable":{"type":"boolean","markdownDescription":"Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","default":false}}},{"title":"lens","properties":{"rust-analyzer.lens.references.enumVariant.enable":{"type":"boolean","markdownDescription":"Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","default":false}}},{"title":"lens","properties":{"rust-analyzer.lens.references.method.enable":{"type":"boolean","markdownDescription":"Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","default":false}}},{"title":"lens","properties":{"rust-analyzer.lens.references.trait.enable":{"type":"boolean","markdownDescription":"Whether to show `References` lens for Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","default":false}}},{"title":"lens","properties":{"rust-analyzer.lens.run.enable":{"type":"boolean","markdownDescription":"Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","default":true}}},{"title":"general","properties":{"rust-analyzer.linkedProjects":{"type":"array","items":{"type":["string","object"]},"markdownDescription":"Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, `.rs` files (which will be treated as standalone files) or JSON\nobjects in `rust-project.json` format.","default":[]}}},{"title":"lru","properties":{"rust-analyzer.lru.capacity":{"type":["null","integer"],"default":null,"maximum":65535,"minimum":0,"markdownDescription":"Number of syntax trees rust-analyzer keeps in memory. Defaults to 128."}}},{"title":"lru","properties":{"rust-analyzer.lru.query.capacities":{"type":"object","markdownDescription":"Sets the LRU capacity of the specified queries.","default":{}}}},{"title":"notifications","properties":{"rust-analyzer.notifications.cargoTomlNotFound":{"type":"boolean","markdownDescription":"Whether to show `can't find Cargo.toml` error message.","default":true}}},{"title":"general","properties":{"rust-analyzer.numThreads":{"anyOf":[{"type":"null"},{"type":"number","minimum":0,"maximum":255},{"type":"string","enum":["physical","logical"],"enumDescriptions":["Use the number of physical cores","Use the number of logical cores"]}],"markdownDescription":"How many worker threads in the main loop. The default `null` means to pick automatically.","default":null}}},{"title":"procMacro","properties":{"rust-analyzer.procMacro.attributes.enable":{"type":"boolean","markdownDescription":"Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.","default":true}}},{"title":"procMacro","properties":{"rust-analyzer.procMacro.enable":{"type":"boolean","markdownDescription":"Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.","default":true}}},{"title":"procMacro","properties":{"rust-analyzer.procMacro.ignored":{"type":"object","markdownDescription":"These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.","default":{}}}},{"title":"procMacro","properties":{"rust-analyzer.procMacro.server":{"type":["null","string"],"markdownDescription":"Internal config, path to proc-macro server executable.","default":null}}},{"title":"references","properties":{"rust-analyzer.references.excludeImports":{"type":"boolean","markdownDescription":"Exclude imports from find-all-references.","default":false}}},{"title":"references","properties":{"rust-analyzer.references.excludeTests":{"type":"boolean","markdownDescription":"Exclude tests from find-all-references.","default":false}}},{"title":"runnables","properties":{"rust-analyzer.runnables.command":{"type":["null","string"],"markdownDescription":"Command to be executed instead of 'cargo' for runnables.","default":null}}},{"title":"runnables","properties":{"rust-analyzer.runnables.extraArgs":{"type":"array","items":{"type":"string"},"markdownDescription":"Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.","default":[]}}},{"title":"runnables","properties":{"rust-analyzer.runnables.extraTestBinaryArgs":{"type":"array","items":{"type":"string"},"markdownDescription":"Additional arguments to be passed through Cargo to launched tests, benchmarks, or\ndoc-tests.\n\nUnless the launched target uses a\n[custom test harness](https:\/\/doc.rust-lang.org\/cargo\/reference\/cargo-targets.html#the-harness-field),\nthey will end up being interpreted as options to\n[`rustc`’s built-in test harness (“libtest”)](https:\/\/doc.rust-lang.org\/rustc\/tests\/index.html#cli-arguments).","default":["--show-output"]}}},{"title":"rustc","properties":{"rust-analyzer.rustc.source":{"type":["null","string"],"markdownDescription":"Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted.","default":null}}},{"title":"rustfmt","properties":{"rust-analyzer.rustfmt.extraArgs":{"type":"array","items":{"type":"string"},"markdownDescription":"Additional arguments to `rustfmt`.","default":[]}}},{"title":"rustfmt","properties":{"rust-analyzer.rustfmt.overrideCommand":{"type":["null","array"],"items":{"type":"string"},"markdownDescription":"Advanced option, fully override the command rust-analyzer uses for\nformatting. This should be the equivalent of `rustfmt` here, and\nnot that of `cargo fmt`. The file contents will be passed on the\nstandard input and the formatted result will be read from the\nstandard output.","default":null}}},{"title":"rustfmt","properties":{"rust-analyzer.rustfmt.rangeFormatting.enable":{"type":"boolean","markdownDescription":"Enables the use of rustfmt's unstable range formatting command for the\n`textDocument\/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build.","default":false}}},{"title":"semanticHighlighting","properties":{"rust-analyzer.semanticHighlighting.doc.comment.inject.enable":{"type":"boolean","markdownDescription":"Inject additional highlighting into doc comments.\n\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\ndoc links.","default":true}}},{"title":"semanticHighlighting","properties":{"rust-analyzer.semanticHighlighting.nonStandardTokens":{"type":"boolean","markdownDescription":"Whether the server is allowed to emit non-standard tokens and modifiers.","default":true}}},{"title":"semanticHighlighting","properties":{"rust-analyzer.semanticHighlighting.operator.enable":{"type":"boolean","markdownDescription":"Use semantic tokens for operators.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\nthey are tagged with modifiers.","default":true}}},{"title":"semanticHighlighting","properties":{"rust-analyzer.semanticHighlighting.operator.specialization.enable":{"type":"boolean","markdownDescription":"Use specialized semantic tokens for operators.\n\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\nof the generic `operator` token type.","default":false}}},{"title":"semanticHighlighting","properties":{"rust-analyzer.semanticHighlighting.punctuation.enable":{"type":"boolean","markdownDescription":"Use semantic tokens for punctuation.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\nthey are tagged with modifiers or have a special role.","default":false}}},{"title":"semanticHighlighting","properties":{"rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang":{"type":"boolean","markdownDescription":"When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\ncalls.","default":false}}},{"title":"semanticHighlighting","properties":{"rust-analyzer.semanticHighlighting.punctuation.specialization.enable":{"type":"boolean","markdownDescription":"Use specialized semantic tokens for punctuation.\n\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\nof the generic `punctuation` token type.","default":false}}},{"title":"semanticHighlighting","properties":{"rust-analyzer.semanticHighlighting.strings.enable":{"type":"boolean","markdownDescription":"Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents.","default":true}}},{"title":"signatureInfo","properties":{"rust-analyzer.signatureInfo.detail":{"type":"string","enumDescriptions":["Show the entire signature.","Show only the parameters."],"default":"full","enum":["full","parameters"],"markdownDescription":"Show full signature of the callable. Only shows parameters if disabled."}}},{"title":"signatureInfo","properties":{"rust-analyzer.signatureInfo.documentation.enable":{"type":"boolean","markdownDescription":"Show documentation.","default":true}}},{"title":"typing","properties":{"rust-analyzer.typing.autoClosingAngleBrackets.enable":{"type":"boolean","markdownDescription":"Whether to insert closing angle brackets when typing an opening angle bracket of a generic argument list.","default":false}}},{"title":"workspace","properties":{"rust-analyzer.workspace.discoverConfig":{"anyOf":[{"type":"null"},{"type":"object","properties":{"command":{"type":"array","items":{"type":"string"}},"filesToWatch":{"type":"array","items":{"type":"string"}},"progressLabel":{"type":"string"}}}],"markdownDescription":"Enables automatic discovery of projects using [`DiscoverWorkspaceConfig::command`].\n\n[`DiscoverWorkspaceConfig`] also requires setting `progress_label` and `files_to_watch`.\n`progress_label` is used for the title in progress indicators, whereas `files_to_watch`\nis used to determine which build system-specific files should be watched in order to\nreload rust-analyzer.\n\nBelow is an example of a valid configuration:\n```json\n\"rust-analyzer.workspace.discoverConfig\": {\n        \"command\": [\n                \"rust-project\",\n                \"develop-json\",\n                {arg}\n        ],\n        \"progressLabel\": \"rust-analyzer\",\n        \"filesToWatch\": [\n                \"BUCK\",\n        ],\n}\n```\n\n## On `DiscoverWorkspaceConfig::command`\n\n**Warning**: This format is provisional and subject to change.\n\n[`DiscoverWorkspaceConfig::command`] *must* return a JSON object\ncorresponding to `DiscoverProjectData::Finished`:\n\n```norun\n#[derive(Debug, Clone, Deserialize, Serialize)]\n#[serde(tag = \"kind\")]\n#[serde(rename_all = \"snake_case\")]\nenum DiscoverProjectData {\n        Finished { buildfile: Utf8PathBuf, project: ProjectJsonData },\n        Error { error: String, source: Option<String> },\n        Progress { message: String },\n}\n```\n\nAs JSON, `DiscoverProjectData::Finished` is:\n\n```json\n{\n        \/\/ the internally-tagged representation of the enum.\n        \"kind\": \"finished\",\n        \/\/ the file used by a non-Cargo build system to define\n        \/\/ a package or target.\n        \"buildfile\": \"rust-analyzer\/BUILD\",\n        \/\/ the contents of a rust-project.json, elided for brevity\n        \"project\": {\n                \"sysroot\": \"foo\",\n                \"crates\": []\n        }\n}\n```\n\nIt is encouraged, but not required, to use the other variants on\n`DiscoverProjectData` to provide a more polished end-user experience.\n\n`DiscoverWorkspaceConfig::command` may *optionally* include an `{arg}`,\nwhich will be substituted with the JSON-serialized form of the following\nenum:\n\n```norun\n#[derive(PartialEq, Clone, Debug, Serialize)]\n#[serde(rename_all = \"camelCase\")]\npub enum DiscoverArgument {\n     Path(AbsPathBuf),\n     Buildfile(AbsPathBuf),\n}\n```\n\nThe JSON representation of `DiscoverArgument::Path` is:\n\n```json\n{\n        \"path\": \"src\/main.rs\"\n}\n```\n\nSimilarly, the JSON representation of `DiscoverArgument::Buildfile` is:\n\n```\n{\n        \"buildfile\": \"BUILD\"\n}\n```\n\n`DiscoverArgument::Path` is used to find and generate a `rust-project.json`,\nand therefore, a workspace, whereas `DiscoverArgument::buildfile` is used to\nto update an existing workspace. As a reference for implementors,\nbuck2's `rust-project` will likely be useful:\nhttps:\/\/github.com\/facebook\/buck2\/tree\/main\/integrations\/rust-project.","default":null}}},{"title":"workspace","properties":{"rust-analyzer.workspace.symbol.search.kind":{"type":"string","enumDescriptions":["Search for types only.","Search for all symbols kinds."],"default":"only_types","enum":["only_types","all_symbols"],"markdownDescription":"Workspace symbol search kind."}}},{"title":"workspace","properties":{"rust-analyzer.workspace.symbol.search.limit":{"type":"integer","minimum":0,"markdownDescription":"Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.","default":128}}},{"title":"workspace","properties":{"rust-analyzer.workspace.symbol.search.scope":{"type":"string","enumDescriptions":["Search in current workspace only.","Search in current workspace and dependencies."],"default":"workspace","enum":["workspace","workspace_and_dependencies"],"markdownDescription":"Workspace symbol search scope."}}},{"title":"$generated-end"}]